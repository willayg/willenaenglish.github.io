// ai-modal.js - AI Assistant Modal for Worksheet Textboxes
// Usage: window.showAIModal(currentTextbox)

(function() {

  async function showAIModal(targetTextbox) {
    // Remove any existing modal
    const oldModal = document.getElementById('ai-modal-overlay');
    if (oldModal) oldModal.remove();

    // Dynamically import mode registry
    let modes = [];
    try {
      modes = (await import('./modes/mode-registry.js')).default;
    } catch (e) {
      modes = [];
    }
    if (!modes || modes.length === 0) {
      // fallback: single free mode
      modes = [{
        id: 'free',
        name: 'Free',
        description: 'General AI prompt mode. Enter any request.',
        placeholder: 'e.g. Generate 5 grammar questions about the past tense.',
        async generate(prompt) {
          if (window.generateQuestionsWithAI) {
            return await window.generateQuestionsWithAI(prompt);
          } else {
            return 'Q1. Example question generated by AI.\nQ2. Another question.\nQ3. ...';
          }
        }
      }];
    }

    let currentMode = modes[0];

    // Modal overlay
    const overlay = document.createElement('div');
    overlay.id = 'ai-modal-overlay';

    // Modal box
    const modal = document.createElement('div');
    modal.className = 'mint-ai-modal';

    // --- Mode buttons ---
    // --- Sub-modes for Grammar ---
    let grammarSubMode = 'multi'; // 'multi' is now always the default for grammar

    function createModeBtnRow(selectedId) {
      const row = document.createElement('div');
      row.className = 'mint-ai-modal-mode-row';
      row.style = 'display:flex;gap:10px;margin-bottom:10px;';
      modes.forEach(mode => {
        const btn = document.createElement('button');
        btn.textContent = mode.name;
        btn.className = 'mint-ai-mode-btn';
        btn.style = 'padding:6px 18px;border-radius:8px;border:none;background:#e1e8ed;color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:600;';
        if (mode.id === selectedId) btn.style.background = '#f8c080';
        btn.onclick = () => {
          if (currentMode.id !== mode.id) {
            currentMode = mode;
            grammarSubMode = 'multi'; // Always default to multi for grammar
            updateModeUI();
          }
        };
        row.appendChild(btn);
      });
      // Show sub-buttons for Free mode only
      if (selectedId === 'free') {
        const subRow = document.createElement('div');
        subRow.style = 'display:flex;gap:6px;margin-top:6px;margin-left:0px;justify-content:flex-start;';
        // Open Ended
        const openBtn = document.createElement('button');
        openBtn.textContent = 'Open Ended';
        openBtn.className = 'mint-ai-grammar-sub-btn';
        openBtn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (grammarSubMode==='open'?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
        openBtn.onclick = () => { grammarSubMode = 'open'; updateModeUI(); };
        subRow.appendChild(openBtn);
        // Multi Choice
        const multiBtn = document.createElement('button');
        multiBtn.textContent = 'Multiple Choice';
        multiBtn.className = 'mint-ai-grammar-sub-btn';
        multiBtn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (grammarSubMode==='multi'?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
        multiBtn.onclick = () => { grammarSubMode = 'multi'; updateModeUI(); };
        subRow.appendChild(multiBtn);
        // Fill in the Blanks
        const fillBtn = document.createElement('button');
        fillBtn.textContent = 'Fill in the Blanks';
        fillBtn.className = 'mint-ai-grammar-sub-btn';
        fillBtn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (grammarSubMode==='fill'?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
        fillBtn.onclick = () => { grammarSubMode = 'fill'; updateModeUI(); };
        subRow.appendChild(fillBtn);

        // DIFFICULTY BUTTONS
        const hr1 = document.createElement('hr');
        hr1.style = 'border:none;border-top:1.5px solid #e1e8ed;margin:10px 0 10px 0;';

        const diffRow = document.createElement('div');
        diffRow.style = 'display:flex;gap:6px;margin-top:6px;margin-left:0px;justify-content:flex-start;margin-bottom:16px;';
        const difficulties = [
          { id: 'basic', label: 'Basic' },
          { id: 'easy', label: 'Easy' },
          { id: 'medium', label: 'Medium' },
          { id: 'hard', label: 'Hard' },
          { id: 'veryhard', label: 'Very Hard' },
          { id: 'advanced', label: 'Advanced' }
        ];
        if (!window._aiModalDifficulty) window._aiModalDifficulty = 'basic';
        difficulties.forEach(diff => {
          const btn = document.createElement('button');
          btn.textContent = diff.label;
          btn.className = 'mint-ai-difficulty-btn';
          btn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (window._aiModalDifficulty===diff.id?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
          btn.onclick = () => { window._aiModalDifficulty = diff.id; updateModeUI(); };
          diffRow.appendChild(btn);
        });

        // SLIDER for number of questions
        const hr2 = document.createElement('hr');
        hr2.style = 'border:none;border-top:1.5px solid #e1e8ed;margin:10px 0 10px 0;';
        const sliderRow = document.createElement('div');
        sliderRow.style = 'display:flex;align-items:center;gap:10px;margin-bottom:16px;';
        const sliderLabel = document.createElement('span');
        sliderLabel.textContent = 'Number of questions:';
        sliderLabel.style = 'font-size:0.98em;opacity:0.8;';
        const slider = document.createElement('input');
        slider.type = 'range';
        slider.min = 1;
        slider.max = 20;
        slider.step = 1;
        slider.value = window._aiModalNumQuestions || 5;
        slider.style = 'width:120px;';
        const sliderValue = document.createElement('span');
        sliderValue.textContent = slider.value;
        sliderValue.style = 'font-size:1em;font-weight:600;min-width:24px;text-align:center;';
        slider.oninput = function() {
          sliderValue.textContent = slider.value;
          window._aiModalNumQuestions = slider.value;
        };
        sliderRow.appendChild(sliderLabel);
        sliderRow.appendChild(slider);
        sliderRow.appendChild(sliderValue);

        // Insert subRow after main row, with horizontal lines for hierarchy
        const container = document.createElement('div');
        container.appendChild(row);
        // Add horizontal line
        const hr = document.createElement('hr');
        hr.style = 'border:none;border-top:1.5px solid #e1e8ed;margin:10px 0 10px 0;';
        container.appendChild(hr);
        container.appendChild(subRow);
        container.appendChild(hr1);
        container.appendChild(diffRow);
        container.appendChild(hr2);
        container.appendChild(sliderRow);
        return container;
      }
      // Show sub-buttons for Grammar mode (no Open Ended)
      if (selectedId === 'grammar') {
        const subRow = document.createElement('div');
        subRow.style = 'display:flex;gap:6px;margin-top:6px;margin-left:0px;justify-content:flex-start;';
        // Multi Choice
        const multiBtn = document.createElement('button');
        multiBtn.textContent = 'Multiple Choice';
        multiBtn.className = 'mint-ai-grammar-sub-btn';
        multiBtn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (grammarSubMode==='multi'?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
        multiBtn.onclick = () => { grammarSubMode = 'multi'; updateModeUI(); };
        subRow.appendChild(multiBtn);
        // Fill in the Blanks
        const fillBtn = document.createElement('button');
        fillBtn.textContent = 'Fill in the Blanks';
        fillBtn.className = 'mint-ai-grammar-sub-btn';
        fillBtn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (grammarSubMode==='fill'?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
        fillBtn.onclick = () => { grammarSubMode = 'fill'; updateModeUI(); };
        subRow.appendChild(fillBtn);

        // DIFFICULTY BUTTONS
        const hr1 = document.createElement('hr');
        hr1.style = 'border:none;border-top:1.5px solid #e1e8ed;margin:10px 0 10px 0;';

        const diffRow = document.createElement('div');
        diffRow.style = 'display:flex;gap:6px;margin-top:6px;margin-left:0px;justify-content:flex-start;margin-bottom:16px;';
        const difficulties = [
          { id: 'basic', label: 'Basic' },
          { id: 'easy', label: 'Easy' },
          { id: 'medium', label: 'Medium' },
          { id: 'hard', label: 'Hard' },
          { id: 'veryhard', label: 'Very Hard' },
          { id: 'advanced', label: 'Advanced' }
        ];
        if (!window._aiModalDifficulty) window._aiModalDifficulty = 'basic';
        difficulties.forEach(diff => {
          const btn = document.createElement('button');
          btn.textContent = diff.label;
          btn.className = 'mint-ai-difficulty-btn';
          btn.style = 'padding:2px 10px;font-size:0.92em;border-radius:5px;border:none;background:' + (window._aiModalDifficulty===diff.id?'#f8c080':'#e1e8ed') + ';color:#333;font-family:Poppins,sans-serif;cursor:pointer;font-weight:500;';
          btn.onclick = () => { window._aiModalDifficulty = diff.id; updateModeUI(); };
          diffRow.appendChild(btn);
        });

        // SLIDER for number of questions
        const hr2 = document.createElement('hr');
        hr2.style = 'border:none;border-top:1.5px solid #e1e8ed;margin:10px 0 10px 0;';
        const sliderRow = document.createElement('div');
        sliderRow.style = 'display:flex;align-items:center;gap:10px;margin-bottom:16px;';
        const sliderLabel = document.createElement('span');
        sliderLabel.textContent = 'Number of questions:';
        sliderLabel.style = 'font-size:0.98em;opacity:0.8;';
        const slider = document.createElement('input');
        slider.type = 'range';
        slider.min = 1;
        slider.max = 20;
        slider.step = 1;
        slider.value = window._aiModalNumQuestions || 5;
        slider.style = 'width:120px;';
        const sliderValue = document.createElement('span');
        sliderValue.textContent = slider.value;
        sliderValue.style = 'font-size:1em;font-weight:600;min-width:24px;text-align:center;';
        slider.oninput = function() {
          sliderValue.textContent = slider.value;
          window._aiModalNumQuestions = slider.value;
        };
        sliderRow.appendChild(sliderLabel);
        sliderRow.appendChild(slider);
        sliderRow.appendChild(sliderValue);

        // Insert subRow after main row, with horizontal lines for hierarchy
        const container = document.createElement('div');
        container.appendChild(row);
        // Add horizontal line
        const hr = document.createElement('hr');
        hr.style = 'border:none;border-top:1.5px solid #e1e8ed;margin:10px 0 10px 0;';
        container.appendChild(hr);
        container.appendChild(subRow);
        container.appendChild(hr1);
        container.appendChild(diffRow);
        container.appendChild(hr2);
        container.appendChild(sliderRow);
        return container;
      }
      return row;
    }

    // Left: Prompt area
    const left = document.createElement('div');
    left.className = 'mint-ai-modal-left';

    // Right: Output area
    const right = document.createElement('div');
    right.className = 'mint-ai-modal-right';
    right.innerHTML = `
      <div class="mint-ai-modal-output-title">AI Output</div>
      <div id="ai-modal-output"></div>
      <div class="mint-ai-modal-btn-row-bottom">
        <button id="ai-modal-insert">Insert into Textbox</button>
        <button id="ai-modal-tryagain">Try Again</button>
      </div>
    `;

    // Close button (top right)
    const closeBtn = document.createElement('button');
    closeBtn.textContent = '×';
    closeBtn.title = 'Close';
    closeBtn.className = 'mint-ai-modal-close';

    // Append all
    modal.appendChild(left);
    modal.appendChild(right);
    modal.appendChild(closeBtn);
    overlay.appendChild(modal);
    document.body.appendChild(overlay);


    // --- Mode UI update function ---
    // --- Store prompt value between UI updates ---
    let lastPromptValue = '';
    function updateModeUI() {
      // Save current prompt value if present
      const prevPrompt = document.getElementById('ai-modal-prompt');
      if (prevPrompt) lastPromptValue = prevPrompt.value;

      left.innerHTML = '';

      // Create title
      const title = document.createElement('h1');
      title.className = 'mint-ai-modal-title';
      title.textContent = 'MINT AI';
      left.appendChild(title);

      // Add mode buttons
      left.appendChild(createModeBtnRow(currentMode.id));

      // Add rest of content
      let placeholder = currentMode.placeholder;
      // Adjust prompt for sub-modes, move instructions into placeholder
      if (currentMode.id === 'grammar' || currentMode.id === 'free') {
        let diffLabel = '';
        const diffMap = {
          'basic': 'Basic',
          'easy': 'Easy',
          'medium': 'Medium',
          'hard': 'Hard',
          'veryhard': 'Very Hard',
          'advanced': 'Advanced'
        };
        if (window._aiModalDifficulty && diffMap[window._aiModalDifficulty]) {
          diffLabel = ' Difficulty: ' + diffMap[window._aiModalDifficulty] + '.';
        }
        let numQ = window._aiModalNumQuestions || 5;
        let numQLabel = ' Number of questions: ' + numQ + '.';
        if (grammarSubMode === 'multi') {
          placeholder = 'Generate multiple choice grammar questions. E.g. Create 5 multiple choice questions about superlatives.' + diffLabel + numQLabel;
        } else if (grammarSubMode === 'fill') {
          placeholder = 'Generate fill in the blanks grammar questions. E.g. Create 5 fill in the blank questions about superlatives.' + diffLabel + numQLabel;
        } else {
          placeholder = currentMode.placeholder + (diffLabel ? diffLabel : '') + numQLabel;
        }
      }
      const content = document.createElement('div');
      content.innerHTML = `
        <textarea id="ai-modal-prompt" placeholder="${placeholder}"></textarea>
        <div class="mint-ai-modal-btn-row">
          <button id="ai-modal-generate">Generate</button>
          <button id="ai-modal-cancel">Cancel</button>
          <span id="ai-modal-loading">Generating...</span>
        </div>
        <div id="ai-modal-game">
        </div>
      `;
      left.appendChild(content);
      setTimeout(() => {
        const promptBox = document.getElementById('ai-modal-prompt');
        if (lastPromptValue) promptBox.value = lastPromptValue;
        promptBox.focus();
        document.getElementById('ai-modal-loading').style.display = 'none';
        document.getElementById('ai-modal-insert').style.display = 'none';
        document.getElementById('ai-modal-tryagain').style.display = 'none';
        document.getElementById('ai-modal-output').innerHTML = '';
      }, 50);

      // Attach event handlers
      document.getElementById('ai-modal-cancel').onclick = closeModal;
      document.getElementById('ai-modal-generate').onclick = async function() {
        const userPrompt = document.getElementById('ai-modal-prompt').value.trim();
        if (!userPrompt) {
          document.getElementById('ai-modal-output').textContent = 'Please enter a prompt.';
          return;
        }
        document.getElementById('ai-modal-loading').style.display = 'inline';
        document.getElementById('ai-modal-output').innerHTML = '';
        document.getElementById('ai-modal-insert').style.display = 'none';
        document.getElementById('ai-modal-tryagain').style.display = 'none';
        try {
          // Dynamically import prompt-templates.js
          const templates = await import('./prompt-templates.js');
          // Determine mode, type, difficulty, n, location
          let mode = currentMode.id;
          let type = 'open';
          if (mode === 'grammar' || mode === 'free') {
            if (grammarSubMode === 'multi') type = 'multi';
            else if (grammarSubMode === 'fill') type = 'fill';
            else type = 'open';
          }
          let difficulty = window._aiModalDifficulty || 'basic';
          let n = window._aiModalNumQuestions || 5;
          // Location detection placeholder (implement as needed)
          let location = window._aiModalUserLocation || '';
          // Build layered prompt
          const layeredPrompt = templates.buildPrompt({
            mode,
            type,
            difficulty,
            n,
            userPrompt,
            location
          });
          let aiResult = await currentMode.generate(layeredPrompt);
          
          // Format AI output: bold questions, normal options, horizontal answer key
          let htmlToInsert = '';
          if (aiResult && /Answer\s*Key:/i.test(aiResult)) {
            const lines = aiResult.split(/\r?\n/);
            let startIdx = lines.findIndex(line => /Answer\s*Key:/i.test(line));
            if (startIdx !== -1) {
              let questionLines = lines.slice(0, startIdx).filter(l => l.trim());
              if (questionLines.length === 1) {
                let qLine = questionLines[0];
                let splitQs = qLine.split(/(?=\d+\. )/g);
                if (splitQs.length > 1) {
                  questionLines = splitQs.map(q => q.trim()).filter(Boolean);
                }
              }
              htmlToInsert = questionLines.map(q => {
                // Check if this is a multiple choice question with options
                const mcMatch = q.match(/^(\s*(?:Q\s*)?\d+\.\s*.*?)(\s+[a-d]\).*?)$/i);
                if (mcMatch) {
                  // Multiple choice: question on one line, options on the next line
                  const questionPart = mcMatch[1].trim();
                  const optionsPart = mcMatch[2].trim();
                  // Extract individual options and format them horizontally
                  const options = optionsPart.match(/[a-d]\)[^a-d)]*(?=\s+[a-d]\)|$)/gi);
                  if (options) {
                    const formattedOptions = options.map(opt => opt.trim()).join('&emsp;');
                    return `<strong>${questionPart}</strong><br>&emsp;${formattedOptions}`;
                  } else {
                    // Fallback if option parsing fails
                    return `<strong>${questionPart}</strong><br>&emsp;${optionsPart}`;
                  }
                } else {
                  // Not multiple choice or no options detected, use original logic
                  let formatted = q;
                  formatted = formatted.replace(/^(\s*(?:Q\s*)?\d+\.\s*.*?)(?=\s+[a-d]\))/i, '<strong>$1</strong>');
                  if (!formatted.includes('<strong>')) {
                    formatted = formatted.replace(/^(\s*(?:Q\s*)?\d+\.\s*[^a-d]*?)$/i, '<strong>$1</strong>');
                  }
                  return formatted;
                }
              }).join('<br><br>');
              
              // Collect all answer lines after "Answer Key:"
              let answerParts = [];
              for (let i = startIdx + 1; i < lines.length; i++) {
                let l = lines[i].trim();
                if (!l) continue;
                let m = l.match(/^(\d+)\.\s*([a-zA-Z])\)\s*(.*?)(?:\s|$)/) ||
                        l.match(/^(\d+)\.\s*([a-zA-Z])\s*$/) ||
                        l.match(/^(\d+)\.\s*([a-zA-Z]+.*?)(?:\s|$)/);
                if (m) {
                  answerParts.push(`${m[1]}.${m[2]}`);
                } else {
                  break;
                }
              }
              if (answerParts.length > 0) {
                const horizontal = `<div style="margin-top:16px;"><strong>Answer Key:</strong> <span style="display:inline-block;white-space:nowrap;">${answerParts.join('&emsp;')}</span></div>`;
                htmlToInsert += '<br><br>' + horizontal;
              }
            }
          } else {
            // No answer key, just try to split questions if all on one line and format with bold
            let lines = aiResult.split(/\r?\n/).filter(l => l.trim());
            if (lines.length === 1) {
              let qLine = lines[0];
              let splitQs = qLine.split(/(?=\d+\. )/g);
              if (splitQs.length > 1) {
                lines = splitQs.map(q => q.trim()).filter(Boolean);
              }
            }
            htmlToInsert = lines.map(q => {
              // Check if this is a multiple choice question with options
              const mcMatch = q.match(/^(\s*(?:Q\s*)?\d+\.\s*.*?)(\s+[a-d]\).*?)$/i);
              if (mcMatch) {
                // Multiple choice: question on one line, options on the next line
                const questionPart = mcMatch[1].trim();
                const optionsPart = mcMatch[2].trim();
                // Extract individual options and format them horizontally
                const options = optionsPart.match(/[a-d]\)[^a-d)]*(?=\s+[a-d]\)|$)/gi);
                if (options) {
                  const formattedOptions = options.map(opt => opt.trim()).join('&emsp;');
                  return `<strong>${questionPart}</strong><br>&emsp;${formattedOptions}`;
                } else {
                  // Fallback if option parsing fails
                  return `<strong>${questionPart}</strong><br>&emsp;${optionsPart}`;
                }
              } else {
                // Not multiple choice or no options detected, use original logic
                let formatted = q;
                formatted = formatted.replace(/^(\s*(?:Q\s*)?\d+\.\s*.*?)(?=\s+[a-d]\))/i, '<strong>$1</strong>');
                if (!formatted.includes('<strong>')) {
                  formatted = formatted.replace(/^(\s*(?:Q\s*)?\d+\.\s*[^a-d]*?)$/i, '<strong>$1</strong>');
                }
                return formatted;
              }
            }).join('<br><br>');
          }
          
          document.getElementById('ai-modal-output').innerHTML = htmlToInsert;
          document.getElementById('ai-modal-insert').style.display = 'inline-block';
          document.getElementById('ai-modal-tryagain').style.display = 'inline-block';
        } catch (err) {
          document.getElementById('ai-modal-output').innerHTML = 'Error: ' + (err.message || err);
        } finally {
          document.getElementById('ai-modal-loading').style.display = 'none';
        }
      };
    }

    // Focus prompt after DOM
    setTimeout(updateModeUI, 10);

    // Close logic
    function closeModal() {
      overlay.remove();
    }
    closeBtn.onclick = closeModal;
    overlay.addEventListener('mousedown', function(e) {
      if (e.target === overlay) closeModal();
    });

    // Insert logic
    right.querySelector('#ai-modal-insert').onclick = function() {
      // Use innerHTML from output area so formatting is preserved
      let htmlToInsert = document.getElementById('ai-modal-output').innerHTML;
      
      if (targetTextbox) {
        if (window.pushWorksheetUndo) window.pushWorksheetUndo();
        targetTextbox.innerHTML = htmlToInsert;
        targetTextbox.dispatchEvent(new Event('input'));
        console.log('Text inserted into textbox with HTML formatting');
      }
      closeModal();
    };

    // Try again logic
    right.querySelector('#ai-modal-tryagain').onclick = function() {
      document.getElementById('ai-modal-generate').click();
    };
  }

  window.showAIModal = showAIModal;
})();
